// Generated by https://quicktype.io

export interface Result {
    site_id: SiteID;
    country_default_time_zone: string;
    query: string;
    paging: Paging;
    results: ResultElement[];
    sort: Sort;
    available_sorts: Sort[];
    filters: any[];
    available_filters: AvailableFilter[];
}

export interface AvailableFilter {
    id: string;
    name: string;
    type: string;
    values: AvailableFilterValue[];
}

export interface AvailableFilterValue {
    id: string;
    name: string;
    results: number;
}

export interface Sort {
    id: null | string;
    name: string;
}

export interface Paging {
    total: number;
    primary_results: number;
    offset: number;
    limit: number;
}

export interface ResultElement {
    id: string;
    site_id: SiteID;
    title: string;
    seller: Seller;
    price: number;
    prices: Prices;
    sale_price: null;
    currency_id: CurrencyID;
    available_quantity: number;
    sold_quantity: number;
    buying_mode: BuyingMode;
    listing_type_id: ListingTypeID;
    stop_time: string;
    condition: Condition;
    permalink: string;
    thumbnail: string;
    thumbnail_id: string;
    accepts_mercadopago: boolean;
    installments: Installments;
    address: Address;
    promotions: null;
    shipping: Shipping;
    seller_address: SellerAddress;
    attributes: Attribute[];
    original_price: number | null;
    category_id: string;
    official_store_id: number | null;
    domain_id: string;
    catalog_product_id: null | string;
    tags: ResultTag[];
    order_backend: number;
    use_thumbnail_id: boolean;
    offer_score: null;
    offer_share: null;
    match_score: null;
    winner_item_id: null;
    melicoin: null;
    discounts: null;
    inventory_id: null | string;
    catalog_listing?: boolean;
    differential_pricing?: DifferentialPricing;
}

export interface Address {
    state_id: StateID;
    state_name: StateName;
    city_id: null | string;
    city_name: string;
}

export enum StateID {
    ArB = 'AR-B',
    ArC = 'AR-C',
    ArS = 'AR-S',
    ArX = 'AR-X'
}

export enum StateName {
    BuenosAires = 'Buenos Aires',
    CapitalFederal = 'Capital Federal',
    Córdoba = 'Córdoba',
    SantaFe = 'Santa Fe'
}

export interface Attribute {
    id: string;
    value_struct: Struct | null;
    values: AttributeValue[];
    value_type: ValueType;
    name: string;
    value_id: null | string;
    value_name: null | string;
    attribute_group_id: AttributeGroupID;
    attribute_group_name: AttributeGroupName;
    source: number;
}

export enum AttributeGroupID {
    Main = 'MAIN',
    Others = 'OTHERS'
}

export enum AttributeGroupName {
    Otros = 'Otros',
    Principales = 'Principales'
}

export interface Struct {
    number: number;
    unit: Unit;
}

export enum Unit {
    CM = 'cm',
    G = 'g',
    Kg = 'kg',
    L = 'L',
    M = 'm',
    ML = 'mL',
    Mm = 'mm',
    W = 'W'
}

export enum ValueType {
    Boolean = 'boolean',
    List = 'list',
    Number = 'number',
    NumberUnit = 'number_unit',
    String = 'string'
}

export interface AttributeValue {
    id: null | string;
    name: null | string;
    struct: Struct | null;
    source: number;
}

export enum BuyingMode {
    BuyItNow = 'buy_it_now'
}

export enum Condition {
    New = 'new'
}

export enum CurrencyID {
    Ars = 'ARS'
}

export interface DifferentialPricing {
    id: number;
}

export interface Installments {
    quantity: number;
    amount: number;
    rate: number;
    currency_id: CurrencyID;
}

export enum ListingTypeID {
    GoldPro = 'gold_pro',
    GoldSpecial = 'gold_special'
}

export interface Prices {
    id: string;
    prices: Price[];
    presentation: Presentation;
    payment_method_prices: PaymentMethodPrice[];
    reference_prices: Price[];
    purchase_discounts: PurchaseDiscount[];
}

export interface PaymentMethodPrice {
    id: string;
    conditions: PaymentMethodPriceConditions;
    value: number;
    type: string;
    currency_id: null;
    metadata: PaymentMethodPriceMetadata;
    exchange_rate_context: ExchangeRateContext;
}

export interface PaymentMethodPriceConditions {
    allowed_methods: AllowedMethod[];
    start_time: string;
    end_time: string;
    restricted_to_prices: any[];
}

export interface AllowedMethod {
    id: string;
    issuer_id: number;
    payment_type_id: string;
    installments: null;
}

export enum ExchangeRateContext {
    Default = 'DEFAULT'
}

export interface PaymentMethodPriceMetadata {
    purchase_discount_id: string;
    purchase_discount_type: string;
    purchase_discount_campaign_id: string;
    purchase_discount_rebate_id: string;
}

export interface Presentation {
    display_currency: CurrencyID;
}

export interface Price {
    id: string;
    type: Type;
    amount: number;
    regular_amount?: number | null;
    currency_id: CurrencyID;
    last_updated: string;
    conditions: PriceConditions;
    exchange_rate_context: ExchangeRateContext;
    metadata?: PriceMetadata;
    tags?: any[];
}

export interface PriceConditions {
    context_restrictions: ContextRestriction[];
    start_time: null | string;
    end_time: null | string;
    eligible: boolean;
}

export enum ContextRestriction {
    BuyerLoyalty3 = 'buyer_loyalty_3',
    BuyerLoyalty4 = 'buyer_loyalty_4',
    BuyerLoyalty5 = 'buyer_loyalty_5',
    BuyerLoyalty6 = 'buyer_loyalty_6',
    ChannelMarketplace = 'channel_marketplace',
    ChannelMshops = 'channel_mshops'
}

export interface PriceMetadata {
    campaign_id?: string;
    promotion_id?: string;
    promotion_type?: PromotionType;
    discount_meli_amount?: number;
    campaign_discount_percentage?: number;
    campaign_end_date?: string;
    order_item_price?: number;
    funding_mode?: string;
}

export enum PromotionType {
    Campaign = 'campaign',
    Custom = 'custom',
    DealOfTheDay = 'deal_of_the_day',
    Lightning = 'lightning',
    MarketplaceCampaign = 'marketplace_campaign'
}

export enum Type {
    MinStandard = 'min_standard',
    Promotion = 'promotion',
    Standard = 'standard',
    Was = 'was'
}

export interface PurchaseDiscount {
    purchase_discount_id: string;
    campaign_id: string;
    rebate_id: string;
    type: string;
    discount_percentage: number;
    conditions: PriceConditions;
    purchase_min_amount: number;
    max_discount_amount: number;
    max_benefit_count: number;
    funding_mode: string;
}

export interface Seller {
    id: number;
    permalink: string;
    registration_date: string;
    car_dealer: boolean;
    real_estate_agency: boolean;
    tags: SellerTag[];
    seller_reputation: SellerReputation;
    eshop?: Eshop;
}

export interface Eshop {
    seller: number;
    eshop_rubro: EshopRubro | null;
    eshop_id: number;
    nick_name: string;
    site_id: SiteID;
    eshop_logo_url: string;
    eshop_status_id: number;
    eshop_experience: number;
    eshop_locations: EshopLocation[];
}

export interface EshopLocation {
    country: City;
    city: City;
    neighborhood: City;
    state: City;
}

export interface City {
    id: null | string;
}

export interface EshopRubro {
    category_id: string;
    name: string;
    id: string;
}

export enum SiteID {
    Mla = 'MLA'
}

export interface SellerReputation {
    power_seller_status: PowerSellerStatus | null;
    level_id: LevelID;
    metrics: Metrics;
    transactions: Transactions;
}

export enum LevelID {
    The5_Green = '5_green'
}

export interface Metrics {
    cancellations: Cancellations;
    claims: Cancellations;
    delayed_handling_time: Cancellations;
    sales: Sales;
}

export interface Cancellations {
    period: CancellationsPeriod;
    rate: number;
    value: number;
}

export enum CancellationsPeriod {
    The365Days = '365 days',
    The60Days = '60 days'
}

export interface Sales {
    period: CancellationsPeriod;
    completed: number;
}

export enum PowerSellerStatus {
    Gold = 'gold',
    Platinum = 'platinum'
}

export interface Transactions {
    canceled: number;
    period: TransactionsPeriod;
    total: number;
    ratings: Ratings;
    completed: number;
}

export enum TransactionsPeriod {
    Historic = 'historic'
}

export interface Ratings {
    negative: number;
    neutral: number;
    positive: number;
}

export enum SellerTag {
    Brand = 'brand',
    CreditsActiveBorrower = 'credits_active_borrower',
    CreditsPriority2 = 'credits_priority_2',
    CreditsPriority4 = 'credits_priority_4',
    CreditsProfile = 'credits_profile',
    Eshop = 'eshop',
    LargeSeller = 'large_seller',
    MediumSeller = 'medium_seller',
    MediumSellerAdvanced = 'medium_seller_advanced',
    MessagesAsSeller = 'messages_as_seller',
    Mshops = 'mshops',
    Normal = 'normal'
}

export interface SellerAddress {
    id: string;
    comment: string;
    address_line: string;
    zip_code: string;
    country: Sort;
    state: Sort;
    city: Sort;
    latitude: string;
    longitude: string;
}

export interface Shipping {
    free_shipping: boolean;
    mode: Mode;
    tags: ShippingTag[];
    logistic_type: LogisticType;
    store_pick_up: boolean;
}

export enum LogisticType {
    CrossDocking = 'cross_docking',
    DropOff = 'drop_off',
    Fulfillment = 'fulfillment',
    XdDropOff = 'xd_drop_off'
}

export enum Mode {
    Me2 = 'me2'
}

export enum ShippingTag {
    FSThresholdMlaChangeFeb2021 = 'fs_threshold_mla_change_feb2021',
    Fulfillment = 'fulfillment',
    MLAChgThresholdAgo22 = 'MLA-chg-threshold-ago-22',
    MLAChgThresholdFeb22 = 'MLA-chg-threshold-feb-22',
    MandatoryFreeShipping = 'mandatory_free_shipping',
    SelfServiceIn = 'self_service_in',
    SelfServiceOut = 'self_service_out'
}

export enum ResultTag {
    Ahora12 = 'ahora-12',
    BestSellerCandidate = 'best_seller_candidate',
    BrandVerified = 'brand_verified',
    CartEligible = 'cart_eligible',
    CatalogBoost = 'catalog_boost',
    CertifiedQualityThumbnail = 'certified_quality_thumbnail',
    DealOfTheDay = 'deal_of_the_day',
    DraggedBidsAndVisits = 'dragged_bids_and_visits',
    ExtendedWarrantyEligible = 'extended_warranty_eligible',
    GoodQualityPicture = 'good_quality_picture',
    GoodQualityThumbnail = 'good_quality_thumbnail',
    ImmediatePayment = 'immediate_payment',
    LoyaltyDiscountEligible = 'loyalty_discount_eligible',
    ModerationPenalty = 'moderation_penalty',
    MshopsAhora12 = 'mshops_ahora-12',
    ShippingGuaranteed = 'shipping_guaranteed',
    StandardPriceByChannel = 'standard_price_by_channel',
    SupermarketEligible = 'supermarket_eligible'
}


export interface DescriptionResult {
    text:         string;
    plain_text:   string;
    last_updated: Date;
    date_created: Date;
    snapshot:     Snapshot;
}

export interface Snapshot {
    url:    string;
    width:  number;
    height: number;
    status: string;
}